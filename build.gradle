plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id "com.github.node-gradle.node" version "7.1.0"
}

group = 'de.pjskilltrack'
version = '0.0.1-SNAPSHOT'
description = 'PJSkillTrack'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

node {
    version = '20.12.2' // or your preferred version
    npmVersion = '10.5.0'
    download = true // downloads and uses a local version
    workDir = file("${project.buildDir}/nodejs")
    npmWorkDir = file("${project.buildDir}/npm")
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.mockito:mockito-core:5.11.0'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'io.rest-assured:rest-assured'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

def frontendDir = "$rootDir/webgui"
def frontendBuildDir = "$frontendDir/dist"
def backendStaticDir = "$projectDir/src/main/resources/static"

tasks.register('npmBuild', NpmTask) {
    dependsOn npmInstall
    args = ['run', 'build']
    workingDir = file(frontendDir)
}

tasks.register('copyFrontendToBackend', Copy) {
    dependsOn 'npmBuild'
    from(frontendBuildDir)
    into(backendStaticDir)
}

processResources.dependsOn 'copyFrontendToBackend'
